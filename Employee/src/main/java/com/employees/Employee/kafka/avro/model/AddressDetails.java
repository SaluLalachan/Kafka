/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.employees.Employee.kafka.avro.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AddressDetails extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3933455076598351311L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AddressDetails\",\"namespace\":\"com.employees.Employee.kafka.avro.model\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"HouseName\",\"type\":\"string\"},{\"name\":\"StreetName\",\"type\":\"string\"},{\"name\":\"City\",\"type\":\"string\"},{\"name\":\"PostCode\",\"type\":\"int\"},{\"name\":\"District\",\"type\":\"string\"},{\"name\":\"State\",\"type\":\"string\"},{\"name\":\"Country\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AddressDetails> ENCODER =
      new BinaryMessageEncoder<AddressDetails>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AddressDetails> DECODER =
      new BinaryMessageDecoder<AddressDetails>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<AddressDetails> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<AddressDetails> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AddressDetails>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this AddressDetails to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a AddressDetails from a ByteBuffer. */
  public static AddressDetails fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int id;
  @Deprecated public java.lang.CharSequence HouseName;
  @Deprecated public java.lang.CharSequence StreetName;
  @Deprecated public java.lang.CharSequence City;
  @Deprecated public int PostCode;
  @Deprecated public java.lang.CharSequence District;
  @Deprecated public java.lang.CharSequence State;
  @Deprecated public java.lang.CharSequence Country;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AddressDetails() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param HouseName The new value for HouseName
   * @param StreetName The new value for StreetName
   * @param City The new value for City
   * @param PostCode The new value for PostCode
   * @param District The new value for District
   * @param State The new value for State
   * @param Country The new value for Country
   */
  public AddressDetails(java.lang.Integer id, java.lang.CharSequence HouseName, java.lang.CharSequence StreetName, java.lang.CharSequence City, java.lang.Integer PostCode, java.lang.CharSequence District, java.lang.CharSequence State, java.lang.CharSequence Country) {
    this.id = id;
    this.HouseName = HouseName;
    this.StreetName = StreetName;
    this.City = City;
    this.PostCode = PostCode;
    this.District = District;
    this.State = State;
    this.Country = Country;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return HouseName;
    case 2: return StreetName;
    case 3: return City;
    case 4: return PostCode;
    case 5: return District;
    case 6: return State;
    case 7: return Country;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: HouseName = (java.lang.CharSequence)value$; break;
    case 2: StreetName = (java.lang.CharSequence)value$; break;
    case 3: City = (java.lang.CharSequence)value$; break;
    case 4: PostCode = (java.lang.Integer)value$; break;
    case 5: District = (java.lang.CharSequence)value$; break;
    case 6: State = (java.lang.CharSequence)value$; break;
    case 7: Country = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Integer getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Integer value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'HouseName' field.
   * @return The value of the 'HouseName' field.
   */
  public java.lang.CharSequence getHouseName() {
    return HouseName;
  }

  /**
   * Sets the value of the 'HouseName' field.
   * @param value the value to set.
   */
  public void setHouseName(java.lang.CharSequence value) {
    this.HouseName = value;
  }

  /**
   * Gets the value of the 'StreetName' field.
   * @return The value of the 'StreetName' field.
   */
  public java.lang.CharSequence getStreetName() {
    return StreetName;
  }

  /**
   * Sets the value of the 'StreetName' field.
   * @param value the value to set.
   */
  public void setStreetName(java.lang.CharSequence value) {
    this.StreetName = value;
  }

  /**
   * Gets the value of the 'City' field.
   * @return The value of the 'City' field.
   */
  public java.lang.CharSequence getCity() {
    return City;
  }

  /**
   * Sets the value of the 'City' field.
   * @param value the value to set.
   */
  public void setCity(java.lang.CharSequence value) {
    this.City = value;
  }

  /**
   * Gets the value of the 'PostCode' field.
   * @return The value of the 'PostCode' field.
   */
  public java.lang.Integer getPostCode() {
    return PostCode;
  }

  /**
   * Sets the value of the 'PostCode' field.
   * @param value the value to set.
   */
  public void setPostCode(java.lang.Integer value) {
    this.PostCode = value;
  }

  /**
   * Gets the value of the 'District' field.
   * @return The value of the 'District' field.
   */
  public java.lang.CharSequence getDistrict() {
    return District;
  }

  /**
   * Sets the value of the 'District' field.
   * @param value the value to set.
   */
  public void setDistrict(java.lang.CharSequence value) {
    this.District = value;
  }

  /**
   * Gets the value of the 'State' field.
   * @return The value of the 'State' field.
   */
  public java.lang.CharSequence getState() {
    return State;
  }

  /**
   * Sets the value of the 'State' field.
   * @param value the value to set.
   */
  public void setState(java.lang.CharSequence value) {
    this.State = value;
  }

  /**
   * Gets the value of the 'Country' field.
   * @return The value of the 'Country' field.
   */
  public java.lang.CharSequence getCountry() {
    return Country;
  }

  /**
   * Sets the value of the 'Country' field.
   * @param value the value to set.
   */
  public void setCountry(java.lang.CharSequence value) {
    this.Country = value;
  }

  /**
   * Creates a new AddressDetails RecordBuilder.
   * @return A new AddressDetails RecordBuilder
   */
  public static com.employees.Employee.kafka.avro.model.AddressDetails.Builder newBuilder() {
    return new com.employees.Employee.kafka.avro.model.AddressDetails.Builder();
  }

  /**
   * Creates a new AddressDetails RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AddressDetails RecordBuilder
   */
  public static com.employees.Employee.kafka.avro.model.AddressDetails.Builder newBuilder(com.employees.Employee.kafka.avro.model.AddressDetails.Builder other) {
    return new com.employees.Employee.kafka.avro.model.AddressDetails.Builder(other);
  }

  /**
   * Creates a new AddressDetails RecordBuilder by copying an existing AddressDetails instance.
   * @param other The existing instance to copy.
   * @return A new AddressDetails RecordBuilder
   */
  public static com.employees.Employee.kafka.avro.model.AddressDetails.Builder newBuilder(com.employees.Employee.kafka.avro.model.AddressDetails other) {
    return new com.employees.Employee.kafka.avro.model.AddressDetails.Builder(other);
  }

  /**
   * RecordBuilder for AddressDetails instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AddressDetails>
    implements org.apache.avro.data.RecordBuilder<AddressDetails> {

    private int id;
    private java.lang.CharSequence HouseName;
    private java.lang.CharSequence StreetName;
    private java.lang.CharSequence City;
    private int PostCode;
    private java.lang.CharSequence District;
    private java.lang.CharSequence State;
    private java.lang.CharSequence Country;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.employees.Employee.kafka.avro.model.AddressDetails.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.HouseName)) {
        this.HouseName = data().deepCopy(fields()[1].schema(), other.HouseName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.StreetName)) {
        this.StreetName = data().deepCopy(fields()[2].schema(), other.StreetName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.City)) {
        this.City = data().deepCopy(fields()[3].schema(), other.City);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.PostCode)) {
        this.PostCode = data().deepCopy(fields()[4].schema(), other.PostCode);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.District)) {
        this.District = data().deepCopy(fields()[5].schema(), other.District);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.State)) {
        this.State = data().deepCopy(fields()[6].schema(), other.State);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.Country)) {
        this.Country = data().deepCopy(fields()[7].schema(), other.Country);
        fieldSetFlags()[7] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AddressDetails instance
     * @param other The existing instance to copy.
     */
    private Builder(com.employees.Employee.kafka.avro.model.AddressDetails other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.HouseName)) {
        this.HouseName = data().deepCopy(fields()[1].schema(), other.HouseName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.StreetName)) {
        this.StreetName = data().deepCopy(fields()[2].schema(), other.StreetName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.City)) {
        this.City = data().deepCopy(fields()[3].schema(), other.City);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.PostCode)) {
        this.PostCode = data().deepCopy(fields()[4].schema(), other.PostCode);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.District)) {
        this.District = data().deepCopy(fields()[5].schema(), other.District);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.State)) {
        this.State = data().deepCopy(fields()[6].schema(), other.State);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.Country)) {
        this.Country = data().deepCopy(fields()[7].schema(), other.Country);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Integer getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.employees.Employee.kafka.avro.model.AddressDetails.Builder setId(int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.employees.Employee.kafka.avro.model.AddressDetails.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'HouseName' field.
      * @return The value.
      */
    public java.lang.CharSequence getHouseName() {
      return HouseName;
    }

    /**
      * Sets the value of the 'HouseName' field.
      * @param value The value of 'HouseName'.
      * @return This builder.
      */
    public com.employees.Employee.kafka.avro.model.AddressDetails.Builder setHouseName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.HouseName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'HouseName' field has been set.
      * @return True if the 'HouseName' field has been set, false otherwise.
      */
    public boolean hasHouseName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'HouseName' field.
      * @return This builder.
      */
    public com.employees.Employee.kafka.avro.model.AddressDetails.Builder clearHouseName() {
      HouseName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'StreetName' field.
      * @return The value.
      */
    public java.lang.CharSequence getStreetName() {
      return StreetName;
    }

    /**
      * Sets the value of the 'StreetName' field.
      * @param value The value of 'StreetName'.
      * @return This builder.
      */
    public com.employees.Employee.kafka.avro.model.AddressDetails.Builder setStreetName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.StreetName = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'StreetName' field has been set.
      * @return True if the 'StreetName' field has been set, false otherwise.
      */
    public boolean hasStreetName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'StreetName' field.
      * @return This builder.
      */
    public com.employees.Employee.kafka.avro.model.AddressDetails.Builder clearStreetName() {
      StreetName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'City' field.
      * @return The value.
      */
    public java.lang.CharSequence getCity() {
      return City;
    }

    /**
      * Sets the value of the 'City' field.
      * @param value The value of 'City'.
      * @return This builder.
      */
    public com.employees.Employee.kafka.avro.model.AddressDetails.Builder setCity(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.City = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'City' field has been set.
      * @return True if the 'City' field has been set, false otherwise.
      */
    public boolean hasCity() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'City' field.
      * @return This builder.
      */
    public com.employees.Employee.kafka.avro.model.AddressDetails.Builder clearCity() {
      City = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'PostCode' field.
      * @return The value.
      */
    public java.lang.Integer getPostCode() {
      return PostCode;
    }

    /**
      * Sets the value of the 'PostCode' field.
      * @param value The value of 'PostCode'.
      * @return This builder.
      */
    public com.employees.Employee.kafka.avro.model.AddressDetails.Builder setPostCode(int value) {
      validate(fields()[4], value);
      this.PostCode = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'PostCode' field has been set.
      * @return True if the 'PostCode' field has been set, false otherwise.
      */
    public boolean hasPostCode() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'PostCode' field.
      * @return This builder.
      */
    public com.employees.Employee.kafka.avro.model.AddressDetails.Builder clearPostCode() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'District' field.
      * @return The value.
      */
    public java.lang.CharSequence getDistrict() {
      return District;
    }

    /**
      * Sets the value of the 'District' field.
      * @param value The value of 'District'.
      * @return This builder.
      */
    public com.employees.Employee.kafka.avro.model.AddressDetails.Builder setDistrict(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.District = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'District' field has been set.
      * @return True if the 'District' field has been set, false otherwise.
      */
    public boolean hasDistrict() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'District' field.
      * @return This builder.
      */
    public com.employees.Employee.kafka.avro.model.AddressDetails.Builder clearDistrict() {
      District = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'State' field.
      * @return The value.
      */
    public java.lang.CharSequence getState() {
      return State;
    }

    /**
      * Sets the value of the 'State' field.
      * @param value The value of 'State'.
      * @return This builder.
      */
    public com.employees.Employee.kafka.avro.model.AddressDetails.Builder setState(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.State = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'State' field has been set.
      * @return True if the 'State' field has been set, false otherwise.
      */
    public boolean hasState() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'State' field.
      * @return This builder.
      */
    public com.employees.Employee.kafka.avro.model.AddressDetails.Builder clearState() {
      State = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'Country' field.
      * @return The value.
      */
    public java.lang.CharSequence getCountry() {
      return Country;
    }

    /**
      * Sets the value of the 'Country' field.
      * @param value The value of 'Country'.
      * @return This builder.
      */
    public com.employees.Employee.kafka.avro.model.AddressDetails.Builder setCountry(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.Country = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'Country' field has been set.
      * @return True if the 'Country' field has been set, false otherwise.
      */
    public boolean hasCountry() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'Country' field.
      * @return This builder.
      */
    public com.employees.Employee.kafka.avro.model.AddressDetails.Builder clearCountry() {
      Country = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AddressDetails build() {
      try {
        AddressDetails record = new AddressDetails();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.HouseName = fieldSetFlags()[1] ? this.HouseName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.StreetName = fieldSetFlags()[2] ? this.StreetName : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.City = fieldSetFlags()[3] ? this.City : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.PostCode = fieldSetFlags()[4] ? this.PostCode : (java.lang.Integer) defaultValue(fields()[4]);
        record.District = fieldSetFlags()[5] ? this.District : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.State = fieldSetFlags()[6] ? this.State : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.Country = fieldSetFlags()[7] ? this.Country : (java.lang.CharSequence) defaultValue(fields()[7]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AddressDetails>
    WRITER$ = (org.apache.avro.io.DatumWriter<AddressDetails>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AddressDetails>
    READER$ = (org.apache.avro.io.DatumReader<AddressDetails>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
