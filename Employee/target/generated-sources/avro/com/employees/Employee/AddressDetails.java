/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.employees.Employee;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AddressDetails extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5728027449662271263L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AddressDetails\",\"namespace\":\"com.employees.Employee\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"houseName\",\"type\":\"string\"},{\"name\":\"streetName\",\"type\":\"string\"},{\"name\":\"city\",\"type\":\"string\"},{\"name\":\"postCode\",\"type\":\"int\"},{\"name\":\"district\",\"type\":\"string\"},{\"name\":\"state\",\"type\":\"string\"},{\"name\":\"country\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AddressDetails> ENCODER =
      new BinaryMessageEncoder<AddressDetails>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AddressDetails> DECODER =
      new BinaryMessageDecoder<AddressDetails>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<AddressDetails> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<AddressDetails> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AddressDetails>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this AddressDetails to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a AddressDetails from a ByteBuffer. */
  public static AddressDetails fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int id;
  @Deprecated public java.lang.CharSequence houseName;
  @Deprecated public java.lang.CharSequence streetName;
  @Deprecated public java.lang.CharSequence city;
  @Deprecated public int postCode;
  @Deprecated public java.lang.CharSequence district;
  @Deprecated public java.lang.CharSequence state;
  @Deprecated public java.lang.CharSequence country;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AddressDetails() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param houseName The new value for houseName
   * @param streetName The new value for streetName
   * @param city The new value for city
   * @param postCode The new value for postCode
   * @param district The new value for district
   * @param state The new value for state
   * @param country The new value for country
   */
  public AddressDetails(java.lang.Integer id, java.lang.CharSequence houseName, java.lang.CharSequence streetName, java.lang.CharSequence city, java.lang.Integer postCode, java.lang.CharSequence district, java.lang.CharSequence state, java.lang.CharSequence country) {
    this.id = id;
    this.houseName = houseName;
    this.streetName = streetName;
    this.city = city;
    this.postCode = postCode;
    this.district = district;
    this.state = state;
    this.country = country;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return houseName;
    case 2: return streetName;
    case 3: return city;
    case 4: return postCode;
    case 5: return district;
    case 6: return state;
    case 7: return country;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: houseName = (java.lang.CharSequence)value$; break;
    case 2: streetName = (java.lang.CharSequence)value$; break;
    case 3: city = (java.lang.CharSequence)value$; break;
    case 4: postCode = (java.lang.Integer)value$; break;
    case 5: district = (java.lang.CharSequence)value$; break;
    case 6: state = (java.lang.CharSequence)value$; break;
    case 7: country = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Integer getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Integer value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'houseName' field.
   * @return The value of the 'houseName' field.
   */
  public java.lang.CharSequence getHouseName() {
    return houseName;
  }

  /**
   * Sets the value of the 'houseName' field.
   * @param value the value to set.
   */
  public void setHouseName(java.lang.CharSequence value) {
    this.houseName = value;
  }

  /**
   * Gets the value of the 'streetName' field.
   * @return The value of the 'streetName' field.
   */
  public java.lang.CharSequence getStreetName() {
    return streetName;
  }

  /**
   * Sets the value of the 'streetName' field.
   * @param value the value to set.
   */
  public void setStreetName(java.lang.CharSequence value) {
    this.streetName = value;
  }

  /**
   * Gets the value of the 'city' field.
   * @return The value of the 'city' field.
   */
  public java.lang.CharSequence getCity() {
    return city;
  }

  /**
   * Sets the value of the 'city' field.
   * @param value the value to set.
   */
  public void setCity(java.lang.CharSequence value) {
    this.city = value;
  }

  /**
   * Gets the value of the 'postCode' field.
   * @return The value of the 'postCode' field.
   */
  public java.lang.Integer getPostCode() {
    return postCode;
  }

  /**
   * Sets the value of the 'postCode' field.
   * @param value the value to set.
   */
  public void setPostCode(java.lang.Integer value) {
    this.postCode = value;
  }

  /**
   * Gets the value of the 'district' field.
   * @return The value of the 'district' field.
   */
  public java.lang.CharSequence getDistrict() {
    return district;
  }

  /**
   * Sets the value of the 'district' field.
   * @param value the value to set.
   */
  public void setDistrict(java.lang.CharSequence value) {
    this.district = value;
  }

  /**
   * Gets the value of the 'state' field.
   * @return The value of the 'state' field.
   */
  public java.lang.CharSequence getState() {
    return state;
  }

  /**
   * Sets the value of the 'state' field.
   * @param value the value to set.
   */
  public void setState(java.lang.CharSequence value) {
    this.state = value;
  }

  /**
   * Gets the value of the 'country' field.
   * @return The value of the 'country' field.
   */
  public java.lang.CharSequence getCountry() {
    return country;
  }

  /**
   * Sets the value of the 'country' field.
   * @param value the value to set.
   */
  public void setCountry(java.lang.CharSequence value) {
    this.country = value;
  }

  /**
   * Creates a new AddressDetails RecordBuilder.
   * @return A new AddressDetails RecordBuilder
   */
  public static com.employees.Employee.AddressDetails.Builder newBuilder() {
    return new com.employees.Employee.AddressDetails.Builder();
  }

  /**
   * Creates a new AddressDetails RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AddressDetails RecordBuilder
   */
  public static com.employees.Employee.AddressDetails.Builder newBuilder(com.employees.Employee.AddressDetails.Builder other) {
    return new com.employees.Employee.AddressDetails.Builder(other);
  }

  /**
   * Creates a new AddressDetails RecordBuilder by copying an existing AddressDetails instance.
   * @param other The existing instance to copy.
   * @return A new AddressDetails RecordBuilder
   */
  public static com.employees.Employee.AddressDetails.Builder newBuilder(com.employees.Employee.AddressDetails other) {
    return new com.employees.Employee.AddressDetails.Builder(other);
  }

  /**
   * RecordBuilder for AddressDetails instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AddressDetails>
    implements org.apache.avro.data.RecordBuilder<AddressDetails> {

    private int id;
    private java.lang.CharSequence houseName;
    private java.lang.CharSequence streetName;
    private java.lang.CharSequence city;
    private int postCode;
    private java.lang.CharSequence district;
    private java.lang.CharSequence state;
    private java.lang.CharSequence country;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.employees.Employee.AddressDetails.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.houseName)) {
        this.houseName = data().deepCopy(fields()[1].schema(), other.houseName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.streetName)) {
        this.streetName = data().deepCopy(fields()[2].schema(), other.streetName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.city)) {
        this.city = data().deepCopy(fields()[3].schema(), other.city);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.postCode)) {
        this.postCode = data().deepCopy(fields()[4].schema(), other.postCode);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.district)) {
        this.district = data().deepCopy(fields()[5].schema(), other.district);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.state)) {
        this.state = data().deepCopy(fields()[6].schema(), other.state);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.country)) {
        this.country = data().deepCopy(fields()[7].schema(), other.country);
        fieldSetFlags()[7] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AddressDetails instance
     * @param other The existing instance to copy.
     */
    private Builder(com.employees.Employee.AddressDetails other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.houseName)) {
        this.houseName = data().deepCopy(fields()[1].schema(), other.houseName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.streetName)) {
        this.streetName = data().deepCopy(fields()[2].schema(), other.streetName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.city)) {
        this.city = data().deepCopy(fields()[3].schema(), other.city);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.postCode)) {
        this.postCode = data().deepCopy(fields()[4].schema(), other.postCode);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.district)) {
        this.district = data().deepCopy(fields()[5].schema(), other.district);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.state)) {
        this.state = data().deepCopy(fields()[6].schema(), other.state);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.country)) {
        this.country = data().deepCopy(fields()[7].schema(), other.country);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Integer getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.employees.Employee.AddressDetails.Builder setId(int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.employees.Employee.AddressDetails.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'houseName' field.
      * @return The value.
      */
    public java.lang.CharSequence getHouseName() {
      return houseName;
    }

    /**
      * Sets the value of the 'houseName' field.
      * @param value The value of 'houseName'.
      * @return This builder.
      */
    public com.employees.Employee.AddressDetails.Builder setHouseName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.houseName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'houseName' field has been set.
      * @return True if the 'houseName' field has been set, false otherwise.
      */
    public boolean hasHouseName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'houseName' field.
      * @return This builder.
      */
    public com.employees.Employee.AddressDetails.Builder clearHouseName() {
      houseName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'streetName' field.
      * @return The value.
      */
    public java.lang.CharSequence getStreetName() {
      return streetName;
    }

    /**
      * Sets the value of the 'streetName' field.
      * @param value The value of 'streetName'.
      * @return This builder.
      */
    public com.employees.Employee.AddressDetails.Builder setStreetName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.streetName = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'streetName' field has been set.
      * @return True if the 'streetName' field has been set, false otherwise.
      */
    public boolean hasStreetName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'streetName' field.
      * @return This builder.
      */
    public com.employees.Employee.AddressDetails.Builder clearStreetName() {
      streetName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'city' field.
      * @return The value.
      */
    public java.lang.CharSequence getCity() {
      return city;
    }

    /**
      * Sets the value of the 'city' field.
      * @param value The value of 'city'.
      * @return This builder.
      */
    public com.employees.Employee.AddressDetails.Builder setCity(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.city = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'city' field has been set.
      * @return True if the 'city' field has been set, false otherwise.
      */
    public boolean hasCity() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'city' field.
      * @return This builder.
      */
    public com.employees.Employee.AddressDetails.Builder clearCity() {
      city = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'postCode' field.
      * @return The value.
      */
    public java.lang.Integer getPostCode() {
      return postCode;
    }

    /**
      * Sets the value of the 'postCode' field.
      * @param value The value of 'postCode'.
      * @return This builder.
      */
    public com.employees.Employee.AddressDetails.Builder setPostCode(int value) {
      validate(fields()[4], value);
      this.postCode = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'postCode' field has been set.
      * @return True if the 'postCode' field has been set, false otherwise.
      */
    public boolean hasPostCode() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'postCode' field.
      * @return This builder.
      */
    public com.employees.Employee.AddressDetails.Builder clearPostCode() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'district' field.
      * @return The value.
      */
    public java.lang.CharSequence getDistrict() {
      return district;
    }

    /**
      * Sets the value of the 'district' field.
      * @param value The value of 'district'.
      * @return This builder.
      */
    public com.employees.Employee.AddressDetails.Builder setDistrict(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.district = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'district' field has been set.
      * @return True if the 'district' field has been set, false otherwise.
      */
    public boolean hasDistrict() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'district' field.
      * @return This builder.
      */
    public com.employees.Employee.AddressDetails.Builder clearDistrict() {
      district = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'state' field.
      * @return The value.
      */
    public java.lang.CharSequence getState() {
      return state;
    }

    /**
      * Sets the value of the 'state' field.
      * @param value The value of 'state'.
      * @return This builder.
      */
    public com.employees.Employee.AddressDetails.Builder setState(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.state = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'state' field has been set.
      * @return True if the 'state' field has been set, false otherwise.
      */
    public boolean hasState() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'state' field.
      * @return This builder.
      */
    public com.employees.Employee.AddressDetails.Builder clearState() {
      state = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'country' field.
      * @return The value.
      */
    public java.lang.CharSequence getCountry() {
      return country;
    }

    /**
      * Sets the value of the 'country' field.
      * @param value The value of 'country'.
      * @return This builder.
      */
    public com.employees.Employee.AddressDetails.Builder setCountry(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.country = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'country' field has been set.
      * @return True if the 'country' field has been set, false otherwise.
      */
    public boolean hasCountry() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'country' field.
      * @return This builder.
      */
    public com.employees.Employee.AddressDetails.Builder clearCountry() {
      country = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AddressDetails build() {
      try {
        AddressDetails record = new AddressDetails();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.houseName = fieldSetFlags()[1] ? this.houseName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.streetName = fieldSetFlags()[2] ? this.streetName : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.city = fieldSetFlags()[3] ? this.city : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.postCode = fieldSetFlags()[4] ? this.postCode : (java.lang.Integer) defaultValue(fields()[4]);
        record.district = fieldSetFlags()[5] ? this.district : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.state = fieldSetFlags()[6] ? this.state : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.country = fieldSetFlags()[7] ? this.country : (java.lang.CharSequence) defaultValue(fields()[7]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AddressDetails>
    WRITER$ = (org.apache.avro.io.DatumWriter<AddressDetails>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AddressDetails>
    READER$ = (org.apache.avro.io.DatumReader<AddressDetails>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
